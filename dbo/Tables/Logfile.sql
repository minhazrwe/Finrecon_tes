CREATE TABLE [dbo].[Logfile] (
    [Job]       VARCHAR (2000) NULL,
    [Timestamp] DATETIME       NULL,
    [ID]        INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [pk_Logfile] PRIMARY KEY CLUSTERED ([ID] DESC)
);


GO


-- =============================================
-- Author:		Martin Ulken
-- Create date: 2023-05-10
-- Description:	Trigger that writes a logfile entry into table_log using the Write_Log procedure.
--				This trigger is used so that the former logfile entries are also available in table_log 
--				as long as Write_Log is not used everywhere.
-- =============================================
CREATE trigger [dbo].[Trigger_Logfile_After_Insert] 
	on [dbo].[Logfile] 
	after insert as
		DECLARE @Inserted_Job as varchar(max)
		SELECT @Inserted_Job = isnull(INSERTED.[Job],'') from INSERTED

		/*Write Logentry in table_log using Write_Log if the entry has not been generated by WriteLog */
		if @Inserted_Job not like '%#Write_Log#'
		BEGIN

			/*Check if the logentry is an error.*/
			DECLARE @Log_Level as varchar(20)
			IF @Inserted_Job like '%error%' or @Inserted_Job like '%fail%'
				SET @Log_Level = 'Error'
			Else
				SET @Log_Level = 'Info'

			/*Try to parse the procedure name from the logentry*/
			DECLARE @Current_Procedure as varchar(40)
			DECLARE @Description as varchar(max)
			DECLARE @Delimiter_Position int
			SET @Delimiter_Position = Charindex('-',left(@Inserted_Job,40))
			IF @Delimiter_Position>0
				BEGIN
					SET @Current_Procedure = rtrim(substring(@Inserted_Job,1,@Delimiter_Position-1))
					SET @Description = ltrim(substring(@Inserted_Job,@Delimiter_Position+1,len(@Inserted_Job)-@Delimiter_Position))
				END
			ELSE
				BEGIN
					SET @Current_Procedure = ''
					SET @Description = @Inserted_Job
				END

			/*Write logentry in table_log*/
			EXEC [dbo].[Write_Log] @Log_Level, @Description , @Current_Procedure, '', 'Logfile'
		END

GO

